
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  0000023a  000002ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800156  00800156  00000324  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a44  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086d  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000216  00000000  00000000  00001671  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001888  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003be  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000013d  00000000  00000000  00001d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001e77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 35       	cpi	r26, 0x56	; 86
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e5       	ldi	r26, 0x56	; 86
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 35       	cpi	r26, 0x5C	; 92
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b1 00 	call	0x162	; 0x162 <main>
  9e:	0c 94 1b 01 	jmp	0x236	; 0x236 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <enableParkMode>:
#define PARK_REAR   15 // A1
#define PARK_STATUS 6
#define ACC         2

void enableParkMode(void) {
  PORTC &= ~_BV(PORTC0); // digitalWrite(PARK_FRONT, LOW);
  a6:	40 98       	cbi	0x08, 0	; 8
  PORTC &= ~_BV(PORTC1); // digitalWrite(PARK_REAR, LOW);
  a8:	41 98       	cbi	0x08, 1	; 8
  PORTD &= ~_BV(PORTD6); // digitalWrite(PARK_STATUS, LOW);
  aa:	5e 98       	cbi	0x0b, 6	; 11
  puts("Park Mode: Enabled");
  ac:	8c e1       	ldi	r24, 0x1C	; 28
  ae:	91 e0       	ldi	r25, 0x01	; 1
  b0:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <puts>

000000b4 <disableParkMode>:
}

void disableParkMode(void) {
  PORTC |= _BV(PORTC0); // digitalWrite(PARK_FRONT, HIGH);
  b4:	40 9a       	sbi	0x08, 0	; 8
  PORTC |= _BV(PORTC1); // digitalWrite(PARK_REAR, HIGH);
  b6:	41 9a       	sbi	0x08, 1	; 8
  PORTD |= _BV(PORTD6); // digitalWrite(PARK_STATUS, HIGH);
  b8:	5e 9a       	sbi	0x0b, 6	; 11
  puts("Park Mode: Disabled");
  ba:	8f e2       	ldi	r24, 0x2F	; 47
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <puts>

000000c2 <__vector_5>:

  return 0;
}

ISR(PCINT2_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
  // Read PD2 using the Port D Pin Input Register (PIND)
  if (PIND & _BV(PIND2)) { // PD2 is HIGH
  e4:	4a 9b       	sbis	0x09, 2	; 9
  e6:	03 c0       	rjmp	.+6      	; 0xee <__vector_5+0x2c>
    enableParkMode();
  e8:	0e 94 53 00 	call	0xa6	; 0xa6 <enableParkMode>
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__vector_5+0x30>
  } else { // PD2 is LOW
    disableParkMode();
  ee:	0e 94 5a 00 	call	0xb4	; 0xb4 <disableParkMode>
  }
}
  f2:	ff 91       	pop	r31
  f4:	ef 91       	pop	r30
  f6:	bf 91       	pop	r27
  f8:	af 91       	pop	r26
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	7f 91       	pop	r23
 100:	6f 91       	pop	r22
 102:	5f 91       	pop	r21
 104:	4f 91       	pop	r20
 106:	3f 91       	pop	r19
 108:	2f 91       	pop	r18
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <uart_init>:
#define BAUD 115200
#endif
#include <util/setbaud.h>

void uart_init(void) {
    UBRR0H = UBRRH_VALUE;
 114:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = UBRRL_VALUE;
 118:	80 e1       	ldi	r24, 0x10	; 16
 11a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    
#if USE_2X
    UCSR0A |= _BV(U2X0);
 11e:	e0 ec       	ldi	r30, 0xC0	; 192
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	82 60       	ori	r24, 0x02	; 2
 126:	80 83       	st	Z, r24
#else
    UCSR0A &= ~(_BV(U2X0));
#endif

    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); // 8-bit data
 128:	86 e0       	ldi	r24, 0x06	; 6
 12a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   // Enable RX and TX
 12e:	88 e1       	ldi	r24, 0x18	; 24
 130:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 134:	08 95       	ret

00000136 <uart_putchar>:
}

void uart_putchar(char c, FILE *stream) {
 136:	cf 93       	push	r28
 138:	c8 2f       	mov	r28, r24
    if (c == '\n') {
 13a:	8a 30       	cpi	r24, 0x0A	; 10
 13c:	19 f4       	brne	.+6      	; 0x144 <uart_putchar+0xe>
        uart_putchar('\r', stream);
 13e:	8d e0       	ldi	r24, 0x0D	; 13
 140:	0e 94 9b 00 	call	0x136	; 0x136 <uart_putchar>
    }
    loop_until_bit_is_set(UCSR0A, UDRE0);
 144:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 148:	85 ff       	sbrs	r24, 5
 14a:	fc cf       	rjmp	.-8      	; 0x144 <uart_putchar+0xe>
    UDR0 = c;
 14c:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <uart_getchar>:

char uart_getchar(FILE *stream) {
    loop_until_bit_is_set(UCSR0A, RXC0);
 154:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 158:	87 ff       	sbrs	r24, 7
 15a:	fc cf       	rjmp	.-8      	; 0x154 <uart_getchar>
    return UDR0;
 15c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 160:	08 95       	ret

00000162 <main>:
  puts("Park Mode: Disabled");
}

int main(void) {
  // Power saving
  ADCSRA = 0;  // Disable ADC
 162:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  SPCR = 0; // Disable SPI
 166:	1c bc       	out	0x2c, r1	; 44
  power_adc_disable ();
 168:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 16c:	81 60       	ori	r24, 0x01	; 1
 16e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
  power_spi_disable();
 172:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 176:	84 60       	ori	r24, 0x04	; 4
 178:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
  power_twi_disable();
 17c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 180:	80 68       	ori	r24, 0x80	; 128
 182:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
  power_timer1_disable();
 186:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 18a:	88 60       	ori	r24, 0x08	; 8
 18c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
  // Turn off brown-out enable in software
  // MCUCR = bit (BODS) | bit (BODSE);
  // MCUCR = bit (BODS);

  // Configure IO pins
  DDRC |= _BV(DDC0);    // pinMode(PARK_FRONT, OUTPUT);
 190:	38 9a       	sbi	0x07, 0	; 7
  DDRC |= _BV(DDC1);    // pinMode(PARK_REAR, OUTPUT);
 192:	39 9a       	sbi	0x07, 1	; 7
  DDRD |= _BV(DDD6);    // pinMode(PARK_STATUS, OUTPUT);
 194:	56 9a       	sbi	0x0a, 6	; 10
  DDRD &= ~_BV(DDD2);   // Clear the PD2 pin
 196:	52 98       	cbi	0x0a, 2	; 10
  PORTD |= _BV(PORTD2); // Enable PD2 internal pull-up
 198:	5a 9a       	sbi	0x0b, 2	; 11
  
  // UART setup
  uart_init();
 19a:	0e 94 8a 00 	call	0x114	; 0x114 <uart_init>
  stdout = &uart_output;
 19e:	8e e0       	ldi	r24, 0x0E	; 14
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <__data_end+0x3>
 1a6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <__data_end+0x2>
  stdin  = &uart_input;
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <__data_end+0x1>
 1b2:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>

  // Interupt init
  // Enable pin change interrupt on the PCINT18 pin using Pin Change Mask Register 2 (PCMSK2)
  PCMSK2 |= _BV(PCINT18);
 1b6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
 1ba:	84 60       	ori	r24, 0x04	; 4
 1bc:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
  // Enable pin change interrupt 2 using the Pin Change Interrrupt Control Register (PCICR)
  PCICR |= _BV(PCIE2);
 1c0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 1c4:	84 60       	ori	r24, 0x04	; 4
 1c6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
  // Turn on interrupts
  sei();
 1ca:	78 94       	sei

  puts("System Status: OK");
 1cc:	83 e4       	ldi	r24, 0x43	; 67
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <puts>
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <main+0x72>

000001d6 <puts>:
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <__data_end+0x2>
 1e2:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <__data_end+0x3>
 1e6:	23 81       	ldd	r18, Z+3	; 0x03
 1e8:	21 ff       	sbrs	r18, 1
 1ea:	1b c0       	rjmp	.+54     	; 0x222 <puts+0x4c>
 1ec:	8c 01       	movw	r16, r24
 1ee:	d0 e0       	ldi	r29, 0x00	; 0
 1f0:	c0 e0       	ldi	r28, 0x00	; 0
 1f2:	f8 01       	movw	r30, r16
 1f4:	81 91       	ld	r24, Z+
 1f6:	8f 01       	movw	r16, r30
 1f8:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <__data_end+0x2>
 1fc:	70 91 59 01 	lds	r23, 0x0159	; 0x800159 <__data_end+0x3>
 200:	db 01       	movw	r26, r22
 202:	18 96       	adiw	r26, 0x08	; 8
 204:	ed 91       	ld	r30, X+
 206:	fc 91       	ld	r31, X
 208:	19 97       	sbiw	r26, 0x09	; 9
 20a:	88 23       	and	r24, r24
 20c:	31 f0       	breq	.+12     	; 0x21a <puts+0x44>
 20e:	09 95       	icall
 210:	89 2b       	or	r24, r25
 212:	79 f3       	breq	.-34     	; 0x1f2 <puts+0x1c>
 214:	df ef       	ldi	r29, 0xFF	; 255
 216:	cf ef       	ldi	r28, 0xFF	; 255
 218:	ec cf       	rjmp	.-40     	; 0x1f2 <puts+0x1c>
 21a:	8a e0       	ldi	r24, 0x0A	; 10
 21c:	09 95       	icall
 21e:	89 2b       	or	r24, r25
 220:	19 f0       	breq	.+6      	; 0x228 <puts+0x52>
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	9f ef       	ldi	r25, 0xFF	; 255
 226:	02 c0       	rjmp	.+4      	; 0x22c <puts+0x56>
 228:	8d 2f       	mov	r24, r29
 22a:	9c 2f       	mov	r25, r28
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	08 95       	ret

00000236 <_exit>:
 236:	f8 94       	cli

00000238 <__stop_program>:
 238:	ff cf       	rjmp	.-2      	; 0x238 <__stop_program>
