
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000002c6  0000035a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010e  0080010e  00000368  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f3  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f3  00000000  00000000  00000dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000276  00000000  00000000  000015ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001840  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000417  00000000  00000000  00001910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c9  00000000  00000000  00001d27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001ef0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  14:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_5>
  18:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  1c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  20:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  3c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  40:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  44:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  50:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  58:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  5c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  60:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	50 61       	ori	r21, 0x10	; 16
  6a:	72 6b       	ori	r23, 0xB2	; 178
  6c:	20 4d       	sbci	r18, 0xD0	; 208
  6e:	6f 64       	ori	r22, 0x4F	; 79
  70:	65 3a       	cpi	r22, 0xA5	; 165
  72:	20 44       	sbci	r18, 0x40	; 64
  74:	69 73       	andi	r22, 0x39	; 57
  76:	61 62       	ori	r22, 0x21	; 33
  78:	6c 65       	ori	r22, 0x5C	; 92
  7a:	64 00       	.word	0x0064	; ????

0000007c <enablePark>:
  7c:	50 61 72 6b 20 4d 6f 64 65 3a 20 45 6e 61 62 6c     Park Mode: Enabl
  8c:	65 64 00                                            ed.

0000008f <status>:
  8f:	53 79 73 74 65 6d 20 53 74 61 74 75 73 3a 20 4f     System Status: O
  9f:	4b 00 00                                            K..

000000a2 <__ctors_end>:
  a2:	11 24       	eor	r1, r1
  a4:	1f be       	out	0x3f, r1	; 63
  a6:	cf ef       	ldi	r28, 0xFF	; 255
  a8:	d8 e0       	ldi	r29, 0x08	; 8
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	e6 ec       	ldi	r30, 0xC6	; 198
  b6:	f2 e0       	ldi	r31, 0x02	; 2
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x10>
  ba:	05 90       	lpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	ae 30       	cpi	r26, 0x0E	; 14
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0xc>

000000c4 <__do_clear_bss>:
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	ae e0       	ldi	r26, 0x0E	; 14
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a4 31       	cpi	r26, 0x14	; 20
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <main>
  d8:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <_exit>

000000dc <__bad_interrupt>:
  dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e0 <uart_putchar>:
    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); // 8-bit data
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   // Enable RX and TX
}

// UART putchar function
static int uart_putchar(char c, FILE *stream) {
  e0:	cf 93       	push	r28
  e2:	c8 2f       	mov	r28, r24
    if (c == '\n') {
  e4:	8a 30       	cpi	r24, 0x0A	; 10
  e6:	19 f4       	brne	.+6      	; 0xee <uart_putchar+0xe>
        uart_putchar('\r', stream);
  e8:	8d e0       	ldi	r24, 0x0D	; 13
  ea:	0e 94 70 00 	call	0xe0	; 0xe0 <uart_putchar>
    }
    loop_until_bit_is_set(UCSR0A, UDRE0);
  ee:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  f2:	85 ff       	sbrs	r24, 5
  f4:	fc cf       	rjmp	.-8      	; 0xee <uart_putchar+0xe>
    UDR0 = c;
  f6:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    return 0;
}
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <uart_init>:
const __flash char enablePark[] = "Park Mode: Enabled";
const __flash char disablePark[] = "Park Mode: Disabled";

// URART initialization function
void uart_init(void) {
    UBRR0H = UBRRH_VALUE;
 102:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = UBRRL_VALUE;
 106:	80 e1       	ldi	r24, 0x10	; 16
 108:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    
#if USE_2X
    UCSR0A |= _BV(U2X0);
 10c:	e0 ec       	ldi	r30, 0xC0	; 192
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	82 60       	ori	r24, 0x02	; 2
 114:	80 83       	st	Z, r24
#else
    UCSR0A &= ~(_BV(U2X0));
#endif

    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); // 8-bit data
 116:	86 e0       	ldi	r24, 0x06	; 6
 118:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   // Enable RX and TX
 11c:	88 e1       	ldi	r24, 0x18	; 24
 11e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 122:	08 95       	ret

00000124 <enableParkMode>:
// Setup UART stream
static FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

// Enable Park Mode
void enableParkMode(void) {
  PORTC &= ~_BV(PORTC0); // digitalWrite(PARK_FRONT, LOW);
 124:	40 98       	cbi	0x08, 0	; 8
  PORTC &= ~_BV(PORTC1); // digitalWrite(PARK_RIGHT, LOW);
 126:	41 98       	cbi	0x08, 1	; 8
  PORTC &= ~_BV(PORTC2); // digitalWrite(PARK_LEFT, LOW);
 128:	42 98       	cbi	0x08, 2	; 8
  PORTC &= ~_BV(PORTC3); // digitalWrite(PARK_REAR, LOW);
 12a:	43 98       	cbi	0x08, 3	; 8
  // Turn PARK_STATUS LED ON
  PORTC |= _BV(PORTC4); // digitalWrite(PARK_STATUS, HIGH);
 12c:	44 9a       	sbi	0x08, 4	; 8
  puts_P(enablePark); // Print park mode status message
 12e:	8c e7       	ldi	r24, 0x7C	; 124
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 30 01 	call	0x260	; 0x260 <puts_P>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	8f e9       	ldi	r24, 0x9F	; 159
 138:	9f e0       	ldi	r25, 0x0F	; 15
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <enableParkMode+0x16>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <enableParkMode+0x1c>
 140:	00 00       	nop
 142:	08 95       	ret

00000144 <disableParkMode>:
  _delay_ms(SERIAL_DELAY); // Wait for serial output to finish
}

// Disable Park Mode
void disableParkMode(void) {
  PORTC |= _BV(PORTC0); // digitalWrite(PARK_FRONT, HIGH);
 144:	40 9a       	sbi	0x08, 0	; 8
  PORTC |= _BV(PORTC1); // digitalWrite(PARK_RIGHT, HIGH);
 146:	41 9a       	sbi	0x08, 1	; 8
  PORTC |= _BV(PORTC2); // digitalWrite(PARK_LEFT, HIGH);
 148:	42 9a       	sbi	0x08, 2	; 8
  PORTC |= _BV(PORTC3); // digitalWrite(PARK_REAR, HIGH);
 14a:	43 9a       	sbi	0x08, 3	; 8
  // Turn PARK_STATUS LED OFF
  PORTC &= ~_BV(PORTC4); // digitalWrite(PARK_STATUS, LOW);
 14c:	44 98       	cbi	0x08, 4	; 8
  puts_P(disablePark); // Print park mode status message
 14e:	88 e6       	ldi	r24, 0x68	; 104
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 30 01 	call	0x260	; 0x260 <puts_P>
 156:	8f e9       	ldi	r24, 0x9F	; 159
 158:	9f e0       	ldi	r25, 0x0F	; 15
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <disableParkMode+0x16>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <disableParkMode+0x1c>
 160:	00 00       	nop
 162:	08 95       	ret

00000164 <__vector_5>:

  return 0;
}

ISR(PCINT2_vect)
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	2f 93       	push	r18
 170:	3f 93       	push	r19
 172:	4f 93       	push	r20
 174:	5f 93       	push	r21
 176:	6f 93       	push	r22
 178:	7f 93       	push	r23
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
 17e:	af 93       	push	r26
 180:	bf 93       	push	r27
 182:	ef 93       	push	r30
 184:	ff 93       	push	r31
  // Cancel sleep as a precaution
  sleep_disable();
 186:	83 b7       	in	r24, 0x33	; 51
 188:	8e 7f       	andi	r24, 0xFE	; 254
 18a:	83 bf       	out	0x33, r24	; 51
  // Disable Pin Change Interrupt 2 while we do stuff
  PCICR &= ~_BV(PCIE2);
 18c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 190:	8b 7f       	andi	r24, 0xFB	; 251
 192:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
  // Read PD2 using the Port D Pin Input Register (PIND)
  if (PIND & _BV(PIND2)) { // PD2 is HIGH
 196:	4a 9b       	sbis	0x09, 2	; 9
 198:	03 c0       	rjmp	.+6      	; 0x1a0 <__vector_5+0x3c>
    enableParkMode();
 19a:	0e 94 92 00 	call	0x124	; 0x124 <enableParkMode>
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <__vector_5+0x40>
  } else { // PD2 is LOW
    disableParkMode();
 1a0:	0e 94 a2 00 	call	0x144	; 0x144 <disableParkMode>
  }
}
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	bf 91       	pop	r27
 1aa:	af 91       	pop	r26
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	7f 91       	pop	r23
 1b2:	6f 91       	pop	r22
 1b4:	5f 91       	pop	r21
 1b6:	4f 91       	pop	r20
 1b8:	3f 91       	pop	r19
 1ba:	2f 91       	pop	r18
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <main>:
}

// Main loop
int main(void) {
  // Configure IO
  DDRC |= _BV(DDC0);    // pinMode(PARK_FRONT, OUTPUT);
 1c6:	38 9a       	sbi	0x07, 0	; 7
  DDRC |= _BV(DDC1);    // pinMode(PARK_RIGHT, OUTPUT);
 1c8:	39 9a       	sbi	0x07, 1	; 7
  DDRC |= _BV(DDC2);    // pinMode(PARK_LEFT, OUTPUT);
 1ca:	3a 9a       	sbi	0x07, 2	; 7
  DDRC |= _BV(DDC3);    // pinMode(PARK_REAR, OUTPUT);
 1cc:	3b 9a       	sbi	0x07, 3	; 7
  DDRC |= _BV(DDC4);    // pinMode(PARK_STATUS, OUTPUT);
 1ce:	3c 9a       	sbi	0x07, 4	; 7
  DDRB |= _BV(DDB5);    // pinMode(POWER_STATUS, OUTPUT);
 1d0:	25 9a       	sbi	0x04, 5	; 4
  DDRD &= ~_BV(DDD2);   // Clear the PD2 pin
 1d2:	52 98       	cbi	0x0a, 2	; 10
  PORTD |= _BV(PORTD2); // Enable PD2 internal pull-up
 1d4:	5a 9a       	sbi	0x0b, 2	; 11
  
  // UART setup
  uart_init();
 1d6:	0e 94 81 00 	call	0x102	; 0x102 <uart_init>
  stdout = &uart_output;
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x3>
 1e2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end+0x2>

  // Turn POWER_STATUS LED ON
  PORTB |= _BV(PORTB5); // digitalWrite(POWER_STATUS, HIGH);
 1e6:	2d 9a       	sbi	0x05, 5	; 5
  puts_P(status); // Print system status message
 1e8:	8f e8       	ldi	r24, 0x8F	; 143
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 30 01 	call	0x260	; 0x260 <puts_P>
 1f0:	8f e9       	ldi	r24, 0x9F	; 159
 1f2:	9f e0       	ldi	r25, 0x0F	; 15
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <main+0x2e>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0x34>
 1fa:	00 00       	nop
    PCMSK2 |= _BV(PCINT18);
    // Enable Pin Change Interrupt 2 using the Pin Change Interrupt Control Register (PCICR)
    PCICR |= _BV(PCIE2);

    // Turn off brown-out enable in software
    MCUCR = _BV(BODS) | _BV(BODSE);
 1fc:	20 e6       	ldi	r18, 0x60	; 96
    MCUCR = _BV(BODS);
 1fe:	90 e4       	ldi	r25, 0x40	; 64
  _delay_ms(SERIAL_DELAY); // Wait for serial output to finish
 
 // Loop
  while(1) {
    // Power saving
    power_adc_disable ();
 200:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 204:	81 60       	ori	r24, 0x01	; 1
 206:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    power_spi_disable();
 20a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 20e:	84 60       	ori	r24, 0x04	; 4
 210:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    power_twi_disable();
 214:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 218:	80 68       	ori	r24, 0x80	; 128
 21a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    power_timer1_disable();
 21e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 222:	88 60       	ori	r24, 0x08	; 8
 224:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    power_timer2_disable();
 228:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 22c:	80 64       	ori	r24, 0x40	; 64
 22e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

    // Configure sleep
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 232:	83 b7       	in	r24, 0x33	; 51
 234:	81 7f       	andi	r24, 0xF1	; 241
 236:	84 60       	ori	r24, 0x04	; 4
 238:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
 23a:	83 b7       	in	r24, 0x33	; 51
 23c:	81 60       	ori	r24, 0x01	; 1
 23e:	83 bf       	out	0x33, r24	; 51

    // Do not interrupt before to sleep or ISR will detach interrupts won't wake.
    cli();
 240:	f8 94       	cli

    // Interrupt init
    // Enable Pin Change Interrupt on the PCINT18 pin using Pin Change Mask Register 2 (PCMSK2)
    PCMSK2 |= _BV(PCINT18);
 242:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
 246:	84 60       	ori	r24, 0x04	; 4
 248:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
    // Enable Pin Change Interrupt 2 using the Pin Change Interrupt Control Register (PCICR)
    PCICR |= _BV(PCIE2);
 24c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 250:	84 60       	ori	r24, 0x04	; 4
 252:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>

    // Turn off brown-out enable in software
    MCUCR = _BV(BODS) | _BV(BODSE);
 256:	25 bf       	out	0x35, r18	; 53
    MCUCR = _BV(BODS);
 258:	95 bf       	out	0x35, r25	; 53

    // Enable interrupts
    sei();
 25a:	78 94       	sei
    // Guaranteed sleep_cpu call will be done as CPU executes next instruction after interrupts enabled
    sleep_cpu();
 25c:	88 95       	sleep
 25e:	d0 cf       	rjmp	.-96     	; 0x200 <main+0x3a>

00000260 <puts_P>:
 260:	0f 93       	push	r16
 262:	1f 93       	push	r17
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	8c 01       	movw	r16, r24
 26a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end+0x2>
 26e:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <__data_end+0x3>
 272:	83 81       	ldd	r24, Z+3	; 0x03
 274:	81 ff       	sbrs	r24, 1
 276:	1b c0       	rjmp	.+54     	; 0x2ae <puts_P+0x4e>
 278:	d0 e0       	ldi	r29, 0x00	; 0
 27a:	c0 e0       	ldi	r28, 0x00	; 0
 27c:	f8 01       	movw	r30, r16
 27e:	84 91       	lpm	r24, Z
 280:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end+0x2>
 284:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <__data_end+0x3>
 288:	db 01       	movw	r26, r22
 28a:	18 96       	adiw	r26, 0x08	; 8
 28c:	ed 91       	ld	r30, X+
 28e:	fc 91       	ld	r31, X
 290:	19 97       	sbiw	r26, 0x09	; 9
 292:	88 23       	and	r24, r24
 294:	41 f0       	breq	.+16     	; 0x2a6 <puts_P+0x46>
 296:	09 95       	icall
 298:	89 2b       	or	r24, r25
 29a:	11 f0       	breq	.+4      	; 0x2a0 <puts_P+0x40>
 29c:	df ef       	ldi	r29, 0xFF	; 255
 29e:	cf ef       	ldi	r28, 0xFF	; 255
 2a0:	0f 5f       	subi	r16, 0xFF	; 255
 2a2:	1f 4f       	sbci	r17, 0xFF	; 255
 2a4:	eb cf       	rjmp	.-42     	; 0x27c <puts_P+0x1c>
 2a6:	8a e0       	ldi	r24, 0x0A	; 10
 2a8:	09 95       	icall
 2aa:	89 2b       	or	r24, r25
 2ac:	19 f0       	breq	.+6      	; 0x2b4 <puts_P+0x54>
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	9f ef       	ldi	r25, 0xFF	; 255
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <puts_P+0x58>
 2b4:	8d 2f       	mov	r24, r29
 2b6:	9c 2f       	mov	r25, r28
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	08 95       	ret

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
